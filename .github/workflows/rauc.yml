name: Build RAUC OTA Framework

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-rauc:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up cross-compilation environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libglib2.0-dev \
          libssl-dev \
          libarchive-dev \
          libjson-glib-dev \
          libcurl4-openssl-dev \
          libmount-dev \
          libblkid-dev \
          libkmod-dev \
          libsystemd-dev \
          gcc-arm-linux-gnueabihf \
          g++-arm-linux-gnueabihf
        
    - name: Build RAUC for ARM
      run: |
        # Download and build RAUC
        cd /tmp
        wget https://github.com/rauc/rauc/releases/download/v1.10/rauc-1.10.tar.xz
        tar -xf rauc-1.10.tar.xz
        cd rauc-1.10
        
        # Configure for ARM cross-compilation
        export CC=arm-linux-gnueabihf-gcc
        export CXX=arm-linux-gnueabihf-g++
        export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig
        
        ./configure \
          --host=arm-linux-gnueabihf \
          --prefix=/usr/local/rauc-arm \
          --with-systemdunitdir=/lib/systemd/system \
          --enable-service \
          --disable-gtk-doc
        
        make -j$(nproc)
        sudo make install
        
        # Create RAUC package for deployment
        mkdir -p rauc-deploy
        cp -r /usr/local/rauc-arm/* rauc-deploy/
        
        # Create deployment script
        cat > rauc-deploy/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Installing RAUC on target device..."
        
        # Copy binaries
        sudo cp -r bin/* /usr/local/bin/
        sudo cp -r lib/* /usr/local/lib/
        sudo cp -r share/* /usr/local/share/
        
        # Create systemd service directory
        sudo mkdir -p /lib/systemd/system
        
        # Enable RAUC service
        sudo systemctl daemon-reload
        sudo systemctl enable rauc
        
        echo "RAUC installation completed!"
        EOF
        
        chmod +x rauc-deploy/install.sh
        
        # Package for deployment
        tar -czf rauc-arm-deploy.tar.gz rauc-deploy/
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: armv7-unknown-linux-gnueabihf
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build Rust application
      run: |
        cargo build --release --target armv7-unknown-linux-gnueabihf
        
    - name: Create deployment package
      run: |
        mkdir -p deploy-package
        
        # Copy Rust binary
        cp target/armv7-unknown-linux-gnueabihf/release/scan_demo deploy-package/
        
        # Copy UI files
        cp -r ui deploy-package/
        
        # Copy scripts
        cp -r scripts deploy-package/
        
        # Copy RAUC files
        cp /tmp/rauc-arm-deploy.tar.gz deploy-package/
        
        # Create deployment script
        cat > deploy-package/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Deploying scan demo application..."
        
        # Extract and install RAUC
        tar -xzf rauc-arm-deploy.tar.gz
        cd rauc-deploy
        sudo ./install.sh
        cd ..
        
        # Install application
        sudo mkdir -p /opt/scan-demo
        sudo cp scan_demo /opt/scan-demo/
        sudo cp -r ui /opt/scan-demo/
        sudo cp -r scripts /opt/scan-demo/
        sudo chmod +x /opt/scan-demo/scripts/run_device.sh
        
        # Create systemd service for scan demo
        sudo tee /etc/systemd/system/scan-demo.service > /dev/null << 'SERVICE_EOF'
        [Unit]
        Description=Scan Demo Application
        After=network.target
        
        [Service]
        Type=simple
        User=root
        WorkingDirectory=/opt/scan-demo
        ExecStart=/opt/scan-demo/scan_demo
        Restart=always
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF
        
        sudo systemctl daemon-reload
        sudo systemctl enable scan-demo
        
        echo "Deployment completed!"
        echo "Start service with: sudo systemctl start scan-demo"
        EOF
        
        chmod +x deploy-package/deploy.sh
        
        # Create OTA bundle structure
        mkdir -p deploy-package/ota
        
        # Package everything
        tar -czf scan-demo-rauc-deploy.tar.gz deploy-package/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scan-demo-rauc-arm
        path: scan-demo-rauc-deploy.tar.gz
        retention-days: 30
