name: Build ARMv7 + OTA bundle (Cortex-A7)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-unknown-linux-gnueabihf

      - name: Configure Cargo
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [source.crates-io]
          replace-with = 'ustc'
          [source.ustc]
          registry = "https://mirrors.ustc.edu.cn/crates.io-index"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf rauc openssl tar
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        env:
          RUSTFLAGS: -C target-feature=+neon
        run: cross build --target armv7-unknown-linux-gnueabihf --release

      - name: Generate keys
        run: |
          mkdir -p ota/keys
          if [ ! -f ota/keys/rauc.key ]; then
            openssl genrsa -out ota/keys/rauc.key 2048
            openssl req -new -x509 -key ota/keys/rauc.key -out ota/keys/rauc.cert -days 365 \
              -subj "/CN=STM32MP-OTA-Cert"
          fi

      - name: Create RAUC bundle
        run: |
          set -e
          echo "创建RAUC bundle..."
          
          BUNDLE_DIR="$(mktemp -d)"
          
          # 创建目录结构
          mkdir -p "$BUNDLE_DIR/bin"
          mkdir -p "$BUNDLE_DIR/ui"
          mkdir -p "$BUNDLE_DIR/scripts"
          
          # 复制应用文件
          cp target/armv7-unknown-linux-gnueabihf/release/scan_demo "$BUNDLE_DIR/bin/"
          [ -d "ui" ] && cp -r ui/* "$BUNDLE_DIR/ui/" 2>/dev/null || true
          [ -d "scripts" ] && cp -r scripts/* "$BUNDLE_DIR/scripts/" 2>/dev/null || true
          
          # 创建manifest
          cat > "$BUNDLE_DIR/manifest.raucm" << 'EOF'
          [update]
          compatible=STM32MP1,ScanDemo
          
          [image.app]
          filename=bin/scan_demo
          EOF
          
          # 检查目录内容
          echo "Bundle内容:"
          find "$BUNDLE_DIR" -type f | sort
          
          # 创建bundle
          rauc bundle \
            --cert=ota/keys/rauc.cert \
            --key=ota/keys/rauc.key \
            "$BUNDLE_DIR" \
            "ota/output/update-${{ github.sha }}.raucb"
          
          echo "✓ 打包成功"
          ls -la "ota/output/update-${{ github.sha }}.raucb"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-demo-ota-armv7
          path: |
            target/armv7-unknown-linux-gnueabihf/release/scan_demo
            ui/**
            scripts/**
            ota/output/update-${{ github.sha }}.raucb
            ota/keys/rauc.cert
